name: CodeReaper - Centralized Security Scanner

on:
  schedule:
    - cron: "0 2 */5 * *"
  workflow_dispatch:
    inputs:
      target_repos:
        description: 'Repositories to scan (comma-separated) or "all"'
        required: false
        default: "all"
        type: string
      scan_severity:
        description: "Minimum severity level"
        required: false
        default: "medium"
        type: choice
        options:
          - "critical"
          - "high"
          - "medium"
          - "low"

permissions:
  contents: read
  issues: write
  security-events: read
  actions: read

jobs:
  discover-repos:
    name: Discover Target Repositories
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.discover.outputs.repositories }}
      total_repos: ${{ steps.discover.outputs.total_repos }}
      scan_id: ${{ steps.setup.outputs.scan_id }}
    steps:
      - name: Checkout CodeReaper Repository Only
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Scan Environment
        id: setup
        run: |
          SCAN_ID="scan_$(date +%Y%m%d_%H%M%S)"
          echo "scan_id=$SCAN_ID" >> "$GITHUB_OUTPUT"
          echo "CodeReaper Security Scan Started: $SCAN_ID"

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Discover Target Repositories with Rate Limiting
        id: discover
        run: |
          echo "Discovering repositories with rate limiting protection..."

          RATE_LIMIT=$(gh api rate_limit --jq '.resources.core.remaining')
          echo "GitHub API rate limit remaining: $RATE_LIMIT"

          if [ "$RATE_LIMIT" -lt 100 ]; then
            echo "ERROR: Insufficient API rate limit ($RATE_LIMIT remaining). Aborting scan."
            exit 1
          fi

          if [ "${{ inputs.target_repos }}" == "all" ] || [ -z "${{ inputs.target_repos }}" ]; then
            USERNAME=$(gh api user --jq '.login')
            echo "Scanning repositories owned by: $USERNAME"
            
            repos=$(gh api user/repos --paginate --jq ".[] | select(.name != \"CodeReaper\" and .archived == false and .disabled == false and .owner.login == \"$USERNAME\" and .fork == false) | .full_name" | head -50)
          else
            repos=$(echo "${{ inputs.target_repos }}" | tr ',' '\n' | head -20)
          fi

          repo_array=$(echo "$repos" | grep -v '^$' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          total=$(echo "$repos" | grep -v '^$' | wc -l)

          echo "repositories=$repo_array" >> "$GITHUB_OUTPUT"
          echo "total_repos=$total" >> "$GITHUB_OUTPUT"

          echo "Discovered $total repositories (rate limit safe)"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: discover-repos
    if: needs.discover-repos.outputs.total_repos > 0
    strategy:
      matrix:
        repository: ${{ fromJson(needs.discover-repos.outputs.repositories) }}
      fail-fast: false
      max-parallel: 10
    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          repository: ${{ matrix.repository }}
          token: ${{ secrets.GH_PAT }}

      - name: Detect Primary Language
        id: detect-lang
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          REPO_DATA=$(gh api "repos/${{ matrix.repository }}" 2>/dev/null)
          LANGUAGE=$(echo "$REPO_DATA" | jq -r '.language // "javascript"')
          echo "language=$LANGUAGE" >> "$GITHUB_OUTPUT"

      - name: Run Gitleaks Secret Scanning
        if: github.actor != 'nektos/act'
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        continue-on-error: true

      - name: Capture Gitleaks Results
        if: github.actor != 'nektos/act'
        run: |
          mkdir -p scan-results
          if [ -f gitleaks-report.json ]; then
            cp gitleaks-report.json scan-results/gitleaks-results.json
          else
            echo '[]' > scan-results/gitleaks-results.json
          fi

      - name: Run Snyk Security Scan
        if: github.actor != 'nektos/act'
        uses: snyk/actions/setup@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Execute Snyk Test
        if: github.actor != 'nektos/act'
        run: |
          mkdir -p scan-results
          snyk test --json > scan-results/snyk-results.json || true
          snyk code test --json > scan-results/snyk-code-results.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Run OWASP Dependency Check
        if: github.actor != 'nektos/act'
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ matrix.repository }}
          scan: "."
          format: "JSON"
        env:
          JAVA_HOME: /opt/jdk
        continue-on-error: true

      - name: Capture OWASP Results
        if: github.actor != 'nektos/act'
        run: |
          mkdir -p scan-results
          if [ -f reports/dependency-check-report.json ]; then
            cp reports/dependency-check-report.json scan-results/owasp-results.json
          else
            echo '{"dependencies": []}' > scan-results/owasp-results.json
          fi

      - name: Run Bearer SAST Scan
        if: github.actor != 'nektos/act'
        uses: bearer/bearer-action@v2
        with:
          format: json
          output: bearer-results.json
        continue-on-error: true

      - name: Capture Bearer Results
        if: github.actor != 'nektos/act'
        run: |
          mkdir -p scan-results
          if [ -f bearer-results.json ]; then
            cp bearer-results.json scan-results/bearer-results.json
          else
            echo '{"findings": []}' > scan-results/bearer-results.json
          fi

      - name: Run Scharf Supply Chain Analysis
        if: github.actor != 'nektos/act'
        run: |
          mkdir -p scan-results
          curl -sSfL https://raw.githubusercontent.com/cybrota/scharf/main/install.sh | sh -s -- -b /usr/local/bin
          scharf audit . --output json > scan-results/scharf-results.json || echo '{"findings": []}' > scan-results/scharf-results.json
        continue-on-error: true

      - name: Generate Individual Repository Report
        id: generate-repo-report
        run: |
          REPO_NAME="${{ matrix.repository }}"
          SCAN_ID="${{ needs.discover-repos.outputs.scan_id }}"

          mkdir -p scan-results

          echo "# Security Scan Report: $REPO_NAME" > repo-report.md
          echo "" >> repo-report.md
          echo "**Scan ID:** $SCAN_ID" >> repo-report.md
          echo "**Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> repo-report.md
          echo "**Repository:** $REPO_NAME" >> repo-report.md
          echo "**Primary Language:** ${{ steps.detect-lang.outputs.language }}" >> repo-report.md
          echo "" >> repo-report.md

          TOTAL_FINDINGS=0
          CRITICAL_FINDINGS=0
          HIGH_FINDINGS=0
          MEDIUM_FINDINGS=0
          LOW_FINDINGS=0

          echo "## Gitleaks Secret Scanning Results" >> repo-report.md
          echo "" >> repo-report.md
          if [ -f scan-results/gitleaks-results.json ]; then
            GITLEAKS_COUNT=$(jq length scan-results/gitleaks-results.json 2>/dev/null || echo "0")
            if [ "$GITLEAKS_COUNT" -gt 0 ]; then
              echo "**CRITICAL: $GITLEAKS_COUNT secrets detected**" >> repo-report.md
              echo "" >> repo-report.md
              jq -r '.[] | "- **\(.RuleID)**: \(.Description) in \(.File):\(.StartLine)"' scan-results/gitleaks-results.json >> repo-report.md
              CRITICAL_FINDINGS=$((CRITICAL_FINDINGS + GITLEAKS_COUNT))
              TOTAL_FINDINGS=$((TOTAL_FINDINGS + GITLEAKS_COUNT))
            else
              echo "No secrets detected" >> repo-report.md
            fi
          else
            echo "Scan not available" >> repo-report.md
          fi
          echo "" >> repo-report.md

          echo "## Snyk Vulnerability Scanning Results" >> repo-report.md
          echo "" >> repo-report.md
          if [ -f scan-results/snyk-results.json ]; then
            SNYK_VULNS=$(jq '.vulnerabilities | length' scan-results/snyk-results.json 2>/dev/null || echo "0")
            if [ "$SNYK_VULNS" -gt 0 ]; then
              echo "**$SNYK_VULNS vulnerabilities found**" >> repo-report.md
              echo "" >> repo-report.md
              jq -r '.vulnerabilities[] | "- **\(.title)** (\(.severity)): \(.packageName)@\(.version)"' scan-results/snyk-results.json >> repo-report.md
              
              SNYK_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' scan-results/snyk-results.json 2>/dev/null || echo "0")
              SNYK_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' scan-results/snyk-results.json 2>/dev/null || echo "0")
              SNYK_MEDIUM=$(jq '[.vulnerabilities[] | select(.severity == "medium")] | length' scan-results/snyk-results.json 2>/dev/null || echo "0")
              SNYK_LOW=$(jq '[.vulnerabilities[] | select(.severity == "low")] | length' scan-results/snyk-results.json 2>/dev/null || echo "0")
              
              CRITICAL_FINDINGS=$((CRITICAL_FINDINGS + SNYK_CRITICAL))
              HIGH_FINDINGS=$((HIGH_FINDINGS + SNYK_HIGH))
              MEDIUM_FINDINGS=$((MEDIUM_FINDINGS + SNYK_MEDIUM))
              LOW_FINDINGS=$((LOW_FINDINGS + SNYK_LOW))
              TOTAL_FINDINGS=$((TOTAL_FINDINGS + SNYK_VULNS))
            else
              echo "No vulnerabilities detected" >> repo-report.md
            fi
          else
            echo "Scan not available" >> repo-report.md
          fi
          echo "" >> repo-report.md

          echo "## Snyk Code Analysis Results" >> repo-report.md
          echo "" >> repo-report.md
          if [ -f scan-results/snyk-code-results.json ]; then
            SNYK_CODE_ISSUES=$(jq '.runs[0].results | length' scan-results/snyk-code-results.json 2>/dev/null || echo "0")
            if [ "$SNYK_CODE_ISSUES" -gt 0 ]; then
              echo "**$SNYK_CODE_ISSUES code issues found**" >> repo-report.md
              echo "" >> repo-report.md
              jq -r '.runs[0].results[] | "- **\(.ruleId)**: \(.message.text) in \(.locations[0].physicalLocation.artifactLocation.uri)"' scan-results/snyk-code-results.json >> repo-report.md
              HIGH_FINDINGS=$((HIGH_FINDINGS + SNYK_CODE_ISSUES))
              TOTAL_FINDINGS=$((TOTAL_FINDINGS + SNYK_CODE_ISSUES))
            else
              echo "No code issues detected" >> repo-report.md
            fi
          else
            echo "Scan not available" >> repo-report.md
          fi
          echo "" >> repo-report.md

          echo "## OWASP Dependency Check Results" >> repo-report.md
          echo "" >> repo-report.md
          if [ -f scan-results/owasp-results.json ]; then
            OWASP_VULNS=$(jq '[.dependencies[]? | select(.vulnerabilities?) | .vulnerabilities[]] | length' scan-results/owasp-results.json 2>/dev/null || echo "0")
            if [ "$OWASP_VULNS" -gt 0 ]; then
              echo "**$OWASP_VULNS dependency vulnerabilities found**" >> repo-report.md
              echo "" >> repo-report.md
              jq -r '.dependencies[]? | select(.vulnerabilities?) | .vulnerabilities[] | "- **\(.name)**: \(.description // "No description") (CVSS: \(.cvssv3?.baseScore // .cvssv2?.score // "N/A"))"' scan-results/owasp-results.json >> repo-report.md
              HIGH_FINDINGS=$((HIGH_FINDINGS + OWASP_VULNS))
              TOTAL_FINDINGS=$((TOTAL_FINDINGS + OWASP_VULNS))
            else
              echo "No dependency vulnerabilities detected" >> repo-report.md
            fi
          else
            echo "Scan not available" >> repo-report.md
          fi
          echo "" >> repo-report.md

          echo "## Bearer SAST Analysis Results" >> repo-report.md
          echo "" >> repo-report.md
          if [ -f scan-results/bearer-results.json ]; then
            BEARER_FINDINGS=$(jq '.findings | length' scan-results/bearer-results.json 2>/dev/null || echo "0")
            if [ "$BEARER_FINDINGS" -gt 0 ]; then
              echo "**$BEARER_FINDINGS security findings**" >> repo-report.md
              echo "" >> repo-report.md
              jq -r '.findings[] | "- **\(.rule_id)**: \(.description) in \(.filename):\(.line_number)"' scan-results/bearer-results.json >> repo-report.md
              MEDIUM_FINDINGS=$((MEDIUM_FINDINGS + BEARER_FINDINGS))
              TOTAL_FINDINGS=$((TOTAL_FINDINGS + BEARER_FINDINGS))
            else
              echo "No security findings detected" >> repo-report.md
            fi
          else
            echo "Scan not available" >> repo-report.md
          fi
          echo "" >> repo-report.md

          echo "## Scharf Supply Chain Analysis Results" >> repo-report.md
          echo "" >> repo-report.md
          if [ -f scan-results/scharf-results.json ]; then
            SCHARF_FINDINGS=$(jq '.findings | length' scan-results/scharf-results.json 2>/dev/null || echo "0")
            if [ "$SCHARF_FINDINGS" -gt 0 ]; then
              echo "**$SCHARF_FINDINGS supply chain risks found**" >> repo-report.md
              echo "" >> repo-report.md
              jq -r '.findings[] | "- **\(.rule)**: \(.description) in \(.file)"' scan-results/scharf-results.json >> repo-report.md
              MEDIUM_FINDINGS=$((MEDIUM_FINDINGS + SCHARF_FINDINGS))
              TOTAL_FINDINGS=$((TOTAL_FINDINGS + SCHARF_FINDINGS))
            else
              echo "No supply chain risks detected" >> repo-report.md
            fi
          else
            echo "Scan not available" >> repo-report.md
          fi
          echo "" >> repo-report.md

          if [ "$CRITICAL_FINDINGS" -gt 0 ]; then
            RISK_LEVEL="CRITICAL"
            PRIORITY_LABEL="critical"
          elif [ "$HIGH_FINDINGS" -gt 0 ]; then
            RISK_LEVEL="HIGH"
            PRIORITY_LABEL="high-priority"
          elif [ "$MEDIUM_FINDINGS" -gt 0 ]; then
            RISK_LEVEL="MEDIUM"
            PRIORITY_LABEL="medium-priority"
          else
            RISK_LEVEL="LOW"
            PRIORITY_LABEL="low-priority"
          fi

          echo "## Summary" >> repo-report.md
          echo "" >> repo-report.md
          echo "| Severity | Count |" >> repo-report.md
          echo "|----------|-------|" >> repo-report.md
          echo "| Critical | $CRITICAL_FINDINGS |" >> repo-report.md
          echo "| High | $HIGH_FINDINGS |" >> repo-report.md
          echo "| Medium | $MEDIUM_FINDINGS |" >> repo-report.md
          echo "| Low | $LOW_FINDINGS |" >> repo-report.md
          echo "| **Total** | **$TOTAL_FINDINGS** |" >> repo-report.md
          echo "" >> repo-report.md
          echo "**Overall Risk Level:** $RISK_LEVEL" >> repo-report.md
          echo "" >> repo-report.md
          echo "---" >> repo-report.md
          echo "*Generated by CodeReaper Security Scanner*" >> repo-report.md

          echo "total_findings=$TOTAL_FINDINGS" >> "$GITHUB_OUTPUT"
          echo "risk_level=$RISK_LEVEL" >> "$GITHUB_OUTPUT"
          echo "priority_label=$PRIORITY_LABEL" >> "$GITHUB_OUTPUT"
          echo "critical_findings=$CRITICAL_FINDINGS" >> "$GITHUB_OUTPUT"
          echo "high_findings=$HIGH_FINDINGS" >> "$GITHUB_OUTPUT"
          echo "medium_findings=$MEDIUM_FINDINGS" >> "$GITHUB_OUTPUT"
          echo "low_findings=$LOW_FINDINGS" >> "$GITHUB_OUTPUT"

      - name: Create Required Labels
        run: |
          REQUIRED_LABELS="security critical high-priority medium-priority low-priority immediate-action action-needed review-needed routine-scan good-status"

          for label in $REQUIRED_LABELS; do
            if ! gh label list | grep -q "^$label"; then
              case $label in
                "security")
                  gh label create "$label" --description "Security related issues" --color "d73a4a"
                  ;;
                "critical")
                  gh label create "$label" --description "Critical security issues requiring immediate attention" --color "b60205"
                  ;;
                "high-priority")
                  gh label create "$label" --description "High priority security issues" --color "d93f0b"
                  ;;
                "medium-priority")
                  gh label create "$label" --description "Medium priority security issues" --color "fbca04"
                  ;;
                "low-priority")
                  gh label create "$label" --description "Low priority security issues" --color "0e8a16"
                  ;;
                "immediate-action")
                  gh label create "$label" --description "Requires immediate action" --color "b60205"
                  ;;
                "action-needed")
                  gh label create "$label" --description "Action needed soon" --color "d93f0b"
                  ;;
                "review-needed")
                  gh label create "$label" --description "Review recommended" --color "fbca04"
                  ;;
                "routine-scan")
                  gh label create "$label" --description "Routine security scan" --color "0e8a16"
                  ;;
                "good-status")
                  gh label create "$label" --description "Good security status" --color "0e8a16"
                  ;;
              esac
              echo "Created label: $label"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        continue-on-error: true

      - name: Create Individual Repository Issue
        run: |
          REPO_NAME="${{ matrix.repository }}"
          SCAN_ID="${{ needs.discover-repos.outputs.scan_id }}"
          RISK_LEVEL="${{ steps.generate-repo-report.outputs.risk_level }}"
          TOTAL_FINDINGS="${{ steps.generate-repo-report.outputs.total_findings }}"

          if [ "$RISK_LEVEL" == "CRITICAL" ]; then
            TITLE="CRITICAL Security Issues - $REPO_NAME - $SCAN_ID"
            LABELS="security,critical,immediate-action,${{ steps.generate-repo-report.outputs.priority_label }}"
          elif [ "$RISK_LEVEL" == "HIGH" ]; then
            TITLE="HIGH Priority Security Issues - $REPO_NAME - $SCAN_ID"
            LABELS="security,high-priority,action-needed,${{ steps.generate-repo-report.outputs.priority_label }}"
          elif [ "$RISK_LEVEL" == "MEDIUM" ]; then
            TITLE="Security Issues Detected - $REPO_NAME - $SCAN_ID"
            LABELS="security,medium-priority,review-needed,${{ steps.generate-repo-report.outputs.priority_label }}"
          else
            TITLE="Security Scan Complete - $REPO_NAME - $SCAN_ID"
            LABELS="security,routine-scan,good-status,${{ steps.generate-repo-report.outputs.priority_label }}"
          fi

          ISSUE_BODY=$(cat repo-report.md)

          gh issue create \
            --title "$TITLE" \
            --body "$ISSUE_BODY" \
            --label "$LABELS" \
            --assignee "@me"

          echo "Individual security report created for $REPO_NAME with $TOTAL_FINDINGS findings (Risk: $RISK_LEVEL)"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

  summary:
    name: Generate Scan Summary
    runs-on: ubuntu-latest
    needs: [discover-repos, security-scan]
    if: always() && needs.discover-repos.outputs.total_repos > 0
    steps:
      - name: Generate Summary Report
        run: |
          echo "## CodeReaper Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Scan ID:** ${{ needs.discover-repos.outputs.scan_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repositories Scanned:** ${{ needs.discover-repos.outputs.total_repos }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Completed:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security Tools Used:**" >> $GITHUB_STEP_SUMMARY
          echo "- Gitleaks (Secret Scanning)" >> $GITHUB_STEP_SUMMARY
          echo "- Snyk (Vulnerability & Code Analysis)" >> $GITHUB_STEP_SUMMARY
          echo "- OWASP Dependency Check" >> $GITHUB_STEP_SUMMARY
          echo "- Bearer (SAST Analysis)" >> $GITHUB_STEP_SUMMARY
          echo "- Scharf (Supply Chain Analysis)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Individual reports created for each repository**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Scan:** $(date -d '+5 days' '+%Y-%m-%d')" >> $GITHUB_STEP_SUMMARY

          echo "CodeReaper security scan completed successfully"
